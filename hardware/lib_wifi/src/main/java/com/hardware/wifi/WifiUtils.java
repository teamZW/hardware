package com.hardware.wifi;import android.app.usage.NetworkStatsManager;import android.content.Context;import android.content.IntentFilter;import android.net.ConnectivityManager;import android.net.DhcpInfo;import android.net.Network;import android.net.NetworkCapabilities;import android.net.NetworkInfo;import android.net.NetworkRequest;import android.net.wifi.ScanResult;import android.net.wifi.WifiConfiguration;import android.net.wifi.WifiConfiguration.KeyMgmt;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Build;import android.support.annotation.RequiresApi;import java.io.BufferedReader;import java.io.FileReader;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.net.InetAddress;import java.util.ArrayList;import java.util.List;import java.util.Random;/** * wifi工具类 */public class WifiUtils {    /**     * 日志Tag     */    protected static final String TAG = "WifiUtils";    // ======= wifi管理类对象 =======    /**     * 定义WifiManager对象     */    protected WifiManager mWifiManager;    protected WifiManager.WifiLock mWifiLock;    // ======= 常量 =======    /**     * 没有密码     */    public static final int NOPWD = 0;    /**     * wep加密方式     */    public static final int WEP = 1;    /**     * wpa加密方式     */    public static final int WPA = 2;    // ====================================================    /**     * 构造器(只能进行初始化WifiManager操作，其他靠方法定义)     */    public WifiUtils(Context mContext) {        // 初始化WifiManager对象        mWifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);    }    /**     * 获取wifi管理对象     *     * @return     */    public WifiManager getWifiManager() {        return this.mWifiManager;    }    // ================================================================  wifi 开关、连接状态获取     =================    public void setWifiLock(){        if(mWifiManager!=null){            //创建wifi锁            mWifiLock = mWifiManager.createWifiLock(WifiManager.WIFI_MODE_FULL, TAG);            //锁定            mWifiLock.acquire();        }    }    public void releaseWifiLock(){        if( mWifiLock!=null && mWifiLock.isHeld() ){  //如果占有了wifi锁            mWifiLock.release();        }    }    /**     * 判断是否打开wifi     */    public boolean isOpenWifi() {        try{            return mWifiManager.isWifiEnabled();        }catch (Exception e){            e.printStackTrace();            return false;        }    }    /**     * 打开WIFI     */    public void openWifi() {        // 如果没有打开wifi，才进行打开        if (!isOpenWifi()) {            mWifiManager.setWifiEnabled(true);        }    }    /**     * 关闭WIFI     */    public void closeWifi() {        // 如果已经打开了wifi，才进行关闭        if (isOpenWifi()) {            mWifiManager.setWifiEnabled(false);        }    }    /**     * 自动切换wifi开关状态     */    public void toggleWifiEnabled() {        // 如果打开了，则关闭        // 如果关闭了，则打开        // =================        mWifiManager.setWifiEnabled(!isOpenWifi());    }    /**     * 获取当前WIFI连接状态     */    public int getWifiState() {        // WifiManager.WIFI_STATE_ENABLED: // 已打开        // WifiManager.WIFI_STATE_ENABLING: // 正在打开        // WifiManager.WIFI_STATE_DISABLED: // 已关闭        // WifiManager.WIFI_STATE_DISABLING: // 正在关闭        // WifiManager.WIFI_STATE_UNKNOWN: // 未知        return mWifiManager.getWifiState();    }    // ================================================================== GET 操作 ====================================    /**     * 开始扫描wifi     */    public boolean startScan() {        // 开始扫描        return mWifiManager.startScan();    }    /**     * 得到已配置的网络     */    public List<WifiConfiguration> getConfiguration() {        try {            return mWifiManager.getConfiguredNetworks();        }catch (Exception e){            e.printStackTrace();            return null;        }    }    /**     * 得到网络列表     */    public List<ScanResult> getWifiList() {        return mWifiManager.getScanResults();    }    /**     * 得到WifiInfo对象     */    public WifiInfo getWifiInfo() {        try {            return mWifiManager.getConnectionInfo();        }catch (Exception e){            e.printStackTrace();            return null;        }    }    /**     * 得到MAC地址     */    public String getMacAddress(WifiInfo wifiInfo) {        return wifiInfo.getMacAddress();    }    /**     * 得到接入点的BSSID     */    public String getBSSID(WifiInfo wifiInfo) {        return wifiInfo.getBSSID();    }    /**     * 得到IP地址     */    public int getIPAddress(WifiInfo wifiInfo) {        return wifiInfo.getIpAddress();    }    /**     * 得到连接的ID     */    public int getNetworkId(WifiInfo wifiInfo) {        return wifiInfo.getNetworkId();    }    // ======================================================================= 快捷操作 ====================================    /**     * 获取加密类型(int常量) - 判断String     *     * @param type     */    public static int getWifiType(String type) {        // WPA 是本机的用法        if (type.contains("WPA")) {            return WPA;        } else if (type.contains("WEP")) {            return WEP;        }        // 默认没有密码        return NOPWD;    }    /**     * 获取加密类型(int常量) - 判断int(String)     *     * @param type     */    public static int getWifiTypeInt(String type) {        // WPA 是本机的用法        if (type.equals("2")) {            return WPA;        } else if (type.equals("1")) {            return WEP;        }        // 默认没有密码        return NOPWD;    }    /**     * 获取加密类型(int常量)     *     * @param type     */    public static String getWifiType(int type) {        switch (type) {            case WPA:                return "2";            case WEP:                return "1";            case NOPWD:                return "0";        }        return "0";    }    /**     * 获取加密类型(String)     *     * @param type     * @return     */    public static String getWifiTypeStr(int type) {        switch (type) {            case WPA:                return "WPA";            case WEP:                return "WEP";            default:                return "";        }    }    /**     * 获取密码（经过处理）     *     * @param pwd     需要处理的密码     * @param isJudge 是否需要判断     * @return     */    public String getPassword(String pwd, boolean isJudge) {        if (isJudge && isHexWepKey(pwd)) {            return pwd;        } else {            return "\"" + pwd + "\"";        }    }    protected boolean isHexWepKey(String wepKey) {        // WEP-40, WEP-104, and some vendors using 256-bit WEP (WEP-232?)        int len = wepKey.length();        if (len != 10 && len != 26 && len != 58) {            return false;        }        return isHex(wepKey);    }    protected boolean isHex(String key) {        for (int i = key.length() - 1; i >= 0; i--) {            char c = key.charAt(i);            if (!(c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f')) {                return false;            }        }        return true;    }    /**     * 判断是否连接为null - <unknown ssid>     *     * @param ssid     * @return     */    public static boolean isConnNull(String ssid) {        if (ssid == null) {            return true;        } else if (ssid.indexOf("unknown") != -1) { // <unknown ssid>            return true;        }        return false;    }    /**     * 判断是否存在\"ssid\"，存在则裁剪返回     */    public static String formatSSID(String ssid) {        // 自动去掉SSID        if (ssid != null && ssid.startsWith("\"") && ssid.endsWith("\"")) {            try {                // 裁剪连接的ssid,并返回                return ssid.substring(1, ssid.length() - 1);            } catch (Exception e) {            }        }        return ssid;    }    /**     * 格式化，处理SSID     *     * @param ssid     * @param isOp true = 添加引号，false = 删除引号     * @return     */    public static String formatSSID(String ssid, boolean isOp) {        if (isOp) {            return "\"" + ssid + "\"";        } else {            return formatSSID(ssid);        }    }//	/**//	 * 格式化，处理SSID//	 * @param ssid//	 * @param isOp true = 添加引号，false = 删除引号//	 * @return//	 *///	public static String formatSSID(String ssid,boolean isOp){//		try {//			if(isOp){//				if ((Build.VERSION.SDK_INT >= 21)) {//					return ssid;//				} else {//					return "\"" + ssid + "\"";//				}//			} else {//				if ((Build.VERSION.SDK_INT >= 17)) {//					if (ssid != null && !("".equals(ssid))) {//						// 属于 " 开头，" 开头结尾，才进行裁剪//						if(ssid.startsWith("\"") && ssid.endsWith("\"")){//							ssid = ssid.substring(1, ssid.length() - 1);//						} else if (ssid.startsWith("<") && ssid.endsWith(">") && ssid.contains("unknown")){//							// 如果属于 <unknown ssid> 就进行处理//							ssid = ssid.substring(1, ssid.length() - 1);//						}//					}//				}//			}//		} catch (Exception e) {//			LogUtils.INSTANCE.e(TAG,e,"formatSSID - Error");//		}//		return ssid;//	}    /**     * 获取SSID     *     * @param wifiInfo wifi信息     * @return     */    public static String getSSID(WifiInfo wifiInfo) {        try {            // 获取SSID,并进行处理            return formatSSID(wifiInfo.getSSID(), false);        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG,e,"getSSID - Error");        }        return null;    }    /**     * 通过上下文获取当前连接的ssid     *     * @param mContext 上下文     */    public static String getSSID(Context mContext) {        try {            // 初始化WifiManager对象            WifiManager mWifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);            // 获取当前连接的wifi            WifiInfo wifiInfo = mWifiManager.getConnectionInfo();            // 获取wifi - SSID            return formatSSID(wifiInfo.getSSID(), false);        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG,e,"getSSID - Error");        }        return null;    }    /**     * 判断是否连接ap热点     *     * @return     */    public static boolean isConnectAphot(Context mContext) {        try {            // 获取连接的ssid            //String ssid = getSSID(mContext);            // 连接管理            ConnectivityManager cManager = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);            // 连接状态            NetworkInfo.State nState = cManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI).getState();//            LogTools.debug("camera_config", "nState=" + nState);            if (nState == NetworkInfo.State.CONNECTED || nState == NetworkInfo.State.DISCONNECTED /* && ssid != null && cameraFilter(ssid, false)*/) {                return true;            }        } catch (Exception e) {            return true;        }        return true;    }    public static int getWifiStateAP(Context mContext) {        try {            WifiManager mWifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);//            LogTools.debug("camera_config", "WifiState=" + mWifiManager.getWifiState());            return mWifiManager.getWifiState();        } catch (Exception e) {            e.printStackTrace();            return WifiManager.WIFI_STATE_UNKNOWN;        }        // WifiManager.WIFI_STATE_ENABLED: // 已打开        // WifiManager.WIFI_STATE_ENABLING: // 正在打开        // WifiManager.WIFI_STATE_DISABLED: // 已关闭        // WifiManager.WIFI_STATE_DISABLING: // 正在关闭        // WifiManager.WIFI_STATE_UNKNOWN: // 未知    }    @RequiresApi(api = Build.VERSION_CODES.M)    public static void getNetWorkStateAP(Context mContext) {        try {            NetworkStatsManager cManager = (NetworkStatsManager) mContext.getSystemService(Context.NETWORK_STATS_SERVICE);        } catch (Exception e) {            e.printStackTrace();        }        // WifiManager.WIFI_STATE_ENABLED: // 已打开        // WifiManager.WIFI_STATE_ENABLING: // 正在打开        // WifiManager.WIFI_STATE_DISABLED: // 已关闭        // WifiManager.WIFI_STATE_DISABLING: // 正在关闭        // WifiManager.WIFI_STATE_UNKNOWN: // 未知    }    /**     * 获取Wifi实体类（对外公开）     * @param isCamera 是否设备支持的     */	/*public ArrayList<WifiVo> getWifiVos(boolean isCamera){		// 返回的列表		ArrayList<WifiVo> listWifiVos = new ArrayList<WifiVo>();		// 根据是否需要判断，进行返回对应的数据		if(isCamera){			getCameraWifiEntitys(listWifiVos);		} else {			getWifiEntitys(listWifiVos);		}		return listWifiVos;	}*/    /**     * 获取Wifi实体类（对外公开）     * @param isCamera 是否设备支持的     */	/*public void getWifiVos(ArrayList<WifiVo> listWifiVos, boolean isCamera){		// 清空旧的数据		listWifiVos.clear();		// 根据是否需要判断，进行返回对应的数据		if(isCamera){			getCameraWifiEntitys(listWifiVos);		} else {			getWifiEntitys(listWifiVos);		}	}*/    /**     * 获取wifi实体类（没有需要过滤的wifi） -- 解决wifi重复问题     * @param listWifiVos     * @return     */	/*public void getWifiEntitys(ArrayList<WifiVo> listWifiVos, ConcurrentHashMap<String, String> mapWifiVos){		List<ScanResult> wifiList = this.getWifiList();		// 清空旧数据		listWifiVos.clear();		mapWifiVos.clear();		// 遍历wifi列表数据		for(int i = 0, c = wifiList.size();i < c;i++){			// 如果出现异常，或者失败，则无视当前的索引wifi信息			try {				// 获取当前索引的wifi信息				ScanResult sResult = wifiList.get(i);				// 防止wifi名长度为0				if(sResult.SSID.length() == 0){					continue;				}				// 初始化wifi信息实体类				WifiVo wifi = new WifiVo();				// 保存ssid				wifi.wSSID = formatSSID(sResult.SSID, false);				// 保存加密类型				wifi.wType = getWifiType(sResult.capabilities);				// 保存wifi信号等级				wifi.wLevel = sResult.level;				// 保存wifi信息				listWifiVos.add(wifi);				// 保存信息，防止重复				mapWifiVos.put(wifi.wSSID, wifi.wSSID);			} catch (Exception e) {				//LogUtils.INSTANCE.e(TAG,e,"getWifiEntitys - Error");			}		}	}*/    /**     * 获取wifi实体类（没有需要过滤的wifi） -- 对外不公开     * @param listWifiVos     * @return     */    /*protected ArrayList<WifiVo> getWifiEntitys(ArrayList<WifiVo> listWifiVos){     *//** 扫描出的网络连接列表 *//*		List<ScanResult> wifiList = this.getWifiList();		// 遍历wifi列表数据		for(int i = 0, c = wifiList.size();i < c;i++){			// 如果出现异常，或者失败，则无视当前的索引wifi信息			try {				// 获取当前索引的wifi信息				ScanResult sResult = wifiList.get(i);				// 防止wifi名长度为0				if(sResult.SSID.length() == 0){					continue;				}				// 初始化wifi信息实体类				WifiVo wifi = new WifiVo();				// 保存ssid				wifi.wSSID = formatSSID(sResult.SSID, false);				// 保存加密类型				wifi.wType = getWifiType(sResult.capabilities);				// 保存wifi信号等级				wifi.wLevel = sResult.level;				// 保存wifi信息				listWifiVos.add(wifi);			} catch (Exception e) {				LogUtils.INSTANCE.e(TAG,e,"getWifiEntitys - Error");			}		}		return listWifiVos;	}*/    /**     * 获取wifi实体类（有需要判断的wifi） -- 对外不公开(获取设备支持的Wifi)     * @param listWifiVos     * @return     */    /*protected ArrayList<WifiVo> getCameraWifiEntitys(ArrayList<WifiVo> listWifiVos){     */    /**     * 扫描出的网络连接列表     *//*		List<ScanResult> wifiList = this.getWifiList();		// 遍历wifi列表数据		for(int i = 0, c = wifiList.size();i < c;i++){			// 如果出现异常，或者失败，则无视当前的索引wifi信息			try {				// 获取当前索引的wifi信息				ScanResult sResult = wifiList.get(i);				// 获取ssid				String ssid = formatSSID(sResult.SSID, false);				// 判断是否存在需要的名称，如果存在则保存				if (cameraFilter(ssid, false)) {					// 初始化wifi信息实体类					WifiVo wifi = new WifiVo();					// 保存ssid					wifi.wSSID = ssid;					// 保存加密类型					wifi.wType = getWifiType(sResult.capabilities);					// 保存wifi信号等级					wifi.wLevel = sResult.level;					// 保存wifi信息					listWifiVos.add(wifi);				}			} catch (Exception e) {				LogUtils.INSTANCE.e(TAG,e,"getWifiEntitys - Error");			}		}		return listWifiVos;	}*/    // ================================================================Wifi配置操作 ====================================    static final int SECURITY_NONE = 0;    static final int SECURITY_WEP = 1;    static final int SECURITY_PSK = 2;    static final int SECURITY_EAP = 3;    /**     * 获取Wifi配置,加密类型     *     * @param wifiConfig     * @return     */    public static int getSecurity(WifiConfiguration wifiConfig) {        if (wifiConfig.allowedKeyManagement.get(KeyMgmt.WPA_PSK)) {            return SECURITY_PSK;        }        if (wifiConfig.allowedKeyManagement.get(KeyMgmt.WPA_EAP)                || wifiConfig.allowedKeyManagement.get(KeyMgmt.IEEE8021X)) {            return SECURITY_EAP;        }        return (wifiConfig.wepKeys[0] != null) ? SECURITY_WEP : SECURITY_NONE;    }    /**     * 查看以前是否也配置过这个网络     *     * @param ssid 需要判断的wifi SSID     */    public WifiConfiguration isExsits(String ssid) {        // 获取wifi 连接过的配置信息        List<WifiConfiguration> listWifiConfigs = getConfiguration();        // 防止为null        if (listWifiConfigs == null) {            return null;        }        // 遍历判断是否存在        for (int i = 0, c = listWifiConfigs.size(); i < c; i++) {            WifiConfiguration wConfig = listWifiConfigs.get(i);            if (wConfig != null) {                if (wConfig.SSID.equals("\"" + ssid + "\"")) {                    return wConfig;                }            }        }        return null;    }    /**     * 查看以前是否也配置过这个网络     *     * @param networkId 网络id     */    public WifiConfiguration isExsits(int networkId) {        // 获取wifi 连接过的配置信息        List<WifiConfiguration> listWifiConfigs = getConfiguration();        // 防止为null        if (listWifiConfigs == null) {            return null;        }        // 遍历判断是否存在        for (int i = 0, c = listWifiConfigs.size(); i < c; i++) {            WifiConfiguration wConfig = listWifiConfigs.get(i);            if (wConfig != null) {                if (wConfig.networkId == networkId) {                    return wConfig;                }            }        }        return null;    }    /**     * 获知Wifi配置，是否属于密码加密类型     *     * @param wifiConfig     * @return     */    public static boolean isExsitsPwd(WifiConfiguration wifiConfig) {        int wifiSecurity = getSecurity(wifiConfig);        // 判断是否加密        return (wifiSecurity != SECURITY_NONE);    }    // ================= 配置操作 =================    /**     * 删除属于 "设备热点Wifi SSID" 的 Wifi配置信息     *     * @param mContext     */    public static void delWifiConfigToCamera(Context mContext) {        try {            // 初始化WifiManager对象            WifiManager mWifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);            // 获取wifi 连接过的配置信息            List<WifiConfiguration> listWifiConfigs = mWifiManager.getConfiguredNetworks();            // 防止为null            if (listWifiConfigs != null) {                // 遍历判断是否存在                for (int i = 0, c = listWifiConfigs.size(); i < c; i++) {                    WifiConfiguration wConfig = listWifiConfigs.get(i);                    if (wConfig != null) {                        // 判断是否设备热点wifi前缀                        if (cameraFilter(wConfig.SSID, false)) {                            // 删除操作                            mWifiManager.removeNetwork(wConfig.networkId);                        }                    }                }                // 保存操作                mWifiManager.saveConfiguration();            }        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG, e, "delWifiConfigToCamera - Error");        }    }    /**     * 删除 指定的Wifi SSID 的 Wifi配置信息     *     * @param ssid     */    public static void delWifiConfig(Context mContext, String ssid) {        try {            // 初始化WifiManager对象            WifiManager mWifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);            // 获取wifi 连接过的配置信息            List<WifiConfiguration> listWifiConfigs = mWifiManager.getConfiguredNetworks();            // 防止为null            if (listWifiConfigs != null) {                // 遍历判断是否存在                for (int i = 0, c = listWifiConfigs.size(); i < c; i++) {                    WifiConfiguration wConfig = listWifiConfigs.get(i);                    if (wConfig != null) {                        if (wConfig.SSID.equals("\"" + ssid + "\"")) {                            // 删除操作                            mWifiManager.removeNetwork(wConfig.networkId);                        }                    }                }                // 保存操作                mWifiManager.saveConfiguration();            }        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG, e, "delWifiConfigToCamera - Error");        }    }//	/**//	 * 创建 Wifi 连接配置//	 * @param mContext 当前上下文//	 * @param ssid wifi SSID//	 * @param pwd wifi密码//	 * @param wType 加密类型//	 *///	public WifiConfiguration createWifiConfig(Context mContext,String SSID, String pwd, int wType) {//		// 获取当前连接的wifi//		String cSSID = getSSID(mContext);//		// 当前有连接wifi//		if(cSSID != null){//			// 获取当前连接的wifi 配置//			WifiConfiguration cWifiConfig = this.isExsits(cSSID);//			if(cWifiConfig != null){//				// 断开连接//				disconnectWifi(cWifiConfig.networkId);//				// 保存配置//				mWifiManager.saveConfiguration();//			}//		}////		// 创建一个新的网络配置//		WifiConfiguration newConfig = new WifiConfiguration();//		newConfig.allowedAuthAlgorithms.clear();//		newConfig.allowedGroupCiphers.clear();//		newConfig.allowedKeyManagement.clear();//		newConfig.allowedPairwiseCiphers.clear();//		newConfig.allowedProtocols.clear();//		/** 设置连接的SSID *///		newConfig.SSID = formatSSID(SSID,true);//		// 判断当前准备连接的wifi，是否存在配置文件//		WifiConfiguration dWifiConfig = this.isExsits(SSID);//		if (dWifiConfig != null) {//			// 存在则删除//			mWifiManager.removeNetwork(dWifiConfig.networkId);//		}////		switch(wType){//		case WifiUtils.NOPWD: // 不存在密码//			newConfig.hiddenSSID = true;//			// newConfig.wepKeys[0] = "";//			newConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);//			// newConfig.wepTxKeyIndex = 0;//			break;//		case WifiUtils.WEP: // WEP 加密方式//			newConfig.hiddenSSID = true;//			// newConfig.wepKeys[0]= "\""+Password+"\"";//			if (isHexWepKey(pwd)) {//				newConfig.wepKeys[0] = pwd;//			} else {//				newConfig.wepKeys[0] = "\"" + pwd + "\"";//			}//			newConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);//			newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);//			newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);//			newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);//			newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);//			newConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);//			newConfig.wepTxKeyIndex = 0;//			break;//		case WifiUtils.WPA: // WPA 加密方式//			newConfig.preSharedKey = "\"" + pwd + "\"";//			newConfig.hiddenSSID = true;//			newConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);//			newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);//			newConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);//			newConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);//			// newConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);//			newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);//			newConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);//			newConfig.status = WifiConfiguration.Status.ENABLED;//			break;//		}//		return newConfig;//	}    /**     * 快速连接Wifi(不使用静态ip方式)     *     * @param mContext 当前上下文     * @param ssid     wifi SSID     * @param pwd      wifi密码     * @param wType    加密类型     */    public WifiConfiguration quickConnWifi(Context mContext, String SSID, String pwd, int wType) {        return quickConnWifi(mContext, SSID, pwd, wType, false);    }    /**     * 快速连接Wifi     *     * @param mContext 当前上下文     * @param ssid     wifi SSID     * @param pwd      wifi密码     * @param wType    加密类型     * @param isStatic 是否使用静态ip连接     */    public WifiConfiguration quickConnWifi(Context mContext, String SSID, String pwd, int wType, boolean isStatic) {//        LogTools.debug("camera_config", "SSID=" + SSID + ", pwd=" + pwd + ", wType=" + wType);        // 步骤        // 1.创建Wifi静态Ip连接配置        // 2.创建正常Wifi连接配置        // 3.查询准备连接的Wifi-SSID 是否存在配置文件，准备进行删除        // 4.查询当前连接的Wifi-SSID 准备进行断开        // 5.同步进行断开，删除操作，并且进行保存        // 6.调用连接方法        // 7.返回连接的配置信息        // =============        // --        //LogUtils.INSTANCE.d(TAG, "进入连接Wifi方法 - quickConnWifi");        // --        try {            // 正常的Wifi连接配置            WifiConfiguration connWifiConfig = null;            // 如果需要通过静态ip方式连接,则进行设置            if (isStatic) {                // 创建Wifi静态IP连接配置                WifiConfiguration staticWifiConfig = staticWifiConfig(SSID, pwd, wType);                // 如果静态ip方式,配置失败,则初始化正常连接的Wifi配置                if (staticWifiConfig == null) {                    // 创建正常的配置信息                    connWifiConfig = createWifiConfig(SSID, pwd, wType);                    // --                    //LogUtils.INSTANCE.d("WUtils", "属于正常方式连接(DHCP)");                } else {                    // 设置静态信息                    connWifiConfig = staticWifiConfig;                    // --                    //LogUtils.INSTANCE.d("WUtils", "属于静态IP方式连接");                }            } else {                // 创建正常的配置信息                connWifiConfig = createWifiConfig(SSID, pwd, wType);                // --                //LogUtils.INSTANCE.d("WUtils", "属于正常方式连接(DHCP)");            }            // --//		// 获取当前连接的wifi//		String cSSID = getSSID(mContext);//		// 获取当前连接的wifi 配置//		WifiConfiguration cWifiConfig = null;//		// --//		if(!TextUtils.isEmpty(cSSID)){//			cWifiConfig = this.isExsits(cSSID);//			// 统一进行断开连接、删除配置信息//			if(cWifiConfig != null){//				try {//					mWifiManager.disableNetwork(cWifiConfig.networkId);//					mWifiManager.disconnect();//				} catch (Exception e) {//				}//				// --//				LogUtils.INSTANCE.d("WUtils", "断开之前连接的Wifi - " + cWifiConfig.SSID);//			}//		}            // 判断当前准备连接的wifi，是否存在配置文件            WifiConfiguration preWifiConfig = this.isExsits(SSID);            // --            if (preWifiConfig != null) {                // 存在则删除                boolean isRemove = mWifiManager.removeNetwork(preWifiConfig.networkId);                // 打印结果                //LogUtils.INSTANCE.d("WUtils", "删除旧的配置信息 - " + preWifiConfig.SSID + ", isRemove: " + isRemove);                // 保存配置                mWifiManager.saveConfiguration();            }            // --            // 连接网络            int _nId = mWifiManager.addNetwork(connWifiConfig);//            LogTools.debug("camera_config", "1  _nId=" + _nId + ", SSID=" + SSID + ", pwd=" + pwd);            if (_nId != -1) {                try {                    // 获取当前连接的Wifi对象                    WifiInfo wifiInfo = getWifiInfo();                    // 获取连接的id                    int networdId = wifiInfo.getNetworkId();                    // 禁用网络                    boolean isDisable = mWifiManager.disableNetwork(networdId);                    // 断开之前的连接                    boolean isDisConnect = mWifiManager.disconnect();                    // 打印断开连接结果                    //LogUtils.INSTANCE.d("WUtils", "isDisConnect : " + isDisConnect + ", isDisable : " + isDisable);                } catch (Exception e) {                    e.printStackTrace();                    // --                    //LogUtils.INSTANCE.e(TAG, "关闭连接出错：" + _nId, e);                }                // 开始连接                boolean isResult = mWifiManager.enableNetwork(_nId, true);                // --                if (!isResult) {                    isResult = mWifiManager.enableNetwork(_nId, true);                }                // 打印结果                //LogUtils.INSTANCE.d("WUtils", "addNetwork(enableNetwork) - result : " + isResult);            } else {                // 尝试不带引号SSID连接                //start dunn wifi                connWifiConfig.SSID = formatSSID(connWifiConfig.SSID, false);                //connWifiConfig.SSID = formatSSID(connWifiConfig.SSID, true);                //end dunn wifi                // 连接网络                _nId = mWifiManager.addNetwork(connWifiConfig);//                LogTools.debug("camera_config", "2  _nId=" + _nId + ", SSID=" + SSID + ", pwd=" + pwd);                if (_nId != -1) {                    try {                        // 获取当前连接的Wifi对象                        WifiInfo wifiInfo = getWifiInfo();                        // 获取连接的id                        int networdId = wifiInfo.getNetworkId();                        // 禁用网络                        boolean isDisable = mWifiManager.disableNetwork(networdId);                        // 断开之前的连接                        boolean isDisConnect = mWifiManager.disconnect();                        // 打印断开连接结果                        //LogUtils.INSTANCE.d("WUtils", "isDisConnect : " + isDisConnect + ", isDisable : " + isDisable);                    } catch (Exception e) {                        e.printStackTrace();                        // --                        //LogUtils.INSTANCE.e(TAG, "关闭连接出错：" + _nId, e);                    }                    // 开始连接                    boolean isResult = mWifiManager.enableNetwork(_nId, true);                    // --                    if (!isResult) {                        isResult = mWifiManager.enableNetwork(_nId, true);                    }                    // 打印结果                    //LogUtils.INSTANCE.d ("WUtils", "addNetwork(enableNetwork) - result : " + isResult);                } else {                    connWifiConfig = preWifiConfig;                    if (preWifiConfig != null) {                        mWifiManager.enableNetwork(preWifiConfig.networkId, true);                    }                    return connWifiConfig;                }            }            // --            //LogUtils.INSTANCE.d("WUtils", "开始连接Wifi");            // 保存id            connWifiConfig.networkId = _nId;            // 连接的networkId            //LogUtils.INSTANCE.d("WUtils", "连接的SSID - networkId : " + _nId);            // 返回连接的信息            return connWifiConfig;        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 创建Wifi配置信息（无其他操作，单独返回WifiConfig）     *     * @param SSID     * @param pwd     * @param wType     */    private WifiConfiguration createWifiConfig(String SSID, String pwd, int wType) {        try {            // 创建一个新的网络配置            WifiConfiguration newConfig = new WifiConfiguration();            newConfig.allowedAuthAlgorithms.clear();            newConfig.allowedGroupCiphers.clear();            newConfig.allowedKeyManagement.clear();            newConfig.allowedPairwiseCiphers.clear();            newConfig.allowedProtocols.clear();            newConfig.priority = 0;            /** 设置连接的SSID */            //newConfig.SSID = SSID; // formatSSID(SSID, true);            newConfig.SSID = formatSSID(SSID, true);            switch (wType) {                case WifiUtils.NOPWD: // 不存在密码//                    LogTools.debug("camera_config", "WifiUtils.NOPWD");                    newConfig.hiddenSSID = true;                    //newConfig.wepKeys[0] = "";                    newConfig.allowedKeyManagement.set(KeyMgmt.NONE);                    //newConfig.wepTxKeyIndex = 0;                    break;                case WifiUtils.WEP: // WEP 加密方式//                    LogTools.debug("camera_config", "WifiUtils.WEP");                    newConfig.hiddenSSID = true;                    //newConfig.wepKeys[0]= "\""+Password+"\"";                    if (isHexWepKey(pwd)) {                        newConfig.wepKeys[0] = pwd;                    } else {                        newConfig.wepKeys[0] = "\"" + pwd + "\"";                    }                    newConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);                    newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);                    newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);                    newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);                    newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);                    newConfig.allowedKeyManagement.set(KeyMgmt.NONE);                    newConfig.wepTxKeyIndex = 0;                    break;                case WifiUtils.WPA: // WPA 加密方式//                    LogTools.debug("camera_config", "WifiUtils.WPA");                    newConfig.preSharedKey = "\"" + pwd + "\"";                    newConfig.hiddenSSID = true;                    newConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);                    newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);                    newConfig.allowedKeyManagement.set(KeyMgmt.WPA_PSK);                    newConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);                    //newConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);                    newConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);                    newConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);                    newConfig.status = WifiConfiguration.Status.ENABLED;                    break;            }            return newConfig;        } catch (Exception e) {            e.printStackTrace();            // --            //LogUtils.INSTANCE.e(TAG, e, "createWifiConfig - Error");        }        return null;    }    // ====================  连接操作  ========================    /**     * 移除某个Wifi配置信息     *     * @param wcg     * @return     */    public boolean removeWifiConfig(WifiConfiguration wcg) {        // 如果等于null则直接返回        if (wcg == null)            return false;        // 删除配置        boolean isResult = mWifiManager.removeNetwork(wcg.networkId);        // 保存操作        mWifiManager.saveConfiguration();        // 返回删除结果        return isResult;    }    /**     * 断开指定ID的网络     *     * @param netId wifiid     */    public void disconnectWifi(int netId) {        mWifiManager.disableNetwork(netId);        mWifiManager.disconnect();    }//	/**//	 * 添加一个网络并连接(默认禁止其他网络)//	 * @param wcg wifi配置信息//	 * @return 配置id ，-1 表示失败，其他表示成功//	 *///	public int addNetwork(WifiConfiguration wcg) {//		return this.addNetwork(wcg, true);//	}////	/**//	 * 添加一个网络并连接//	 * @param wcg wifi配置信息//	 * @param disableOthers 是否禁止其他网络//	 * @return 配置id ，-1 表示失败，其他表示成功//	 *///	public int addNetwork(WifiConfiguration wcg,boolean disableOthers) {//		int _nId = mWifiManager.addNetwork(wcg);//		if(_nId != -1){//			// 开始连接//			boolean isResult = mWifiManager.enableNetwork(_nId, disableOthers);//			// 打印结果//			LogUtils.INSTANCE.d(TAG, "addNetwork(enableNetwork) - result : " + isResult);//			// 连接id//			return _nId;//		}//		return -1;//	}    // ================ 设备前缀兼容  ================    /**     * M1,Z2 设备前缀名 - VeePai     */    public static final String Z2M1_PREFIX = "VeePai-"; // VPaiHot_    /**     * Z1 设备前缀名 - Qlippie     */    public static final String Z1_PREFIX = "Qlippie-"; // VPaiHot_    /**     * Z2设备前缀名(长虹定制版) - Ipai-     */    public static final String OEM_Z2_IPAI_PREFIX = "Ipai-"; // IPaiHot_    /**     * Z2设备前缀名(华夏视韵定制版) - Viowo-     */    public static final String OEM_Z2_VIOWO_PREFIX = "viowo-"; // ViowoHot_    /**     * Z2设备前缀名(中性定制版) - Enshow-     */    public static final String OEM_Z2_ENSHOW_PREFIX = "Enshow-"; // EnShowHot_    // --    /**     * 判断是否OEM     */    public static final boolean IS_OEM = false;    /**     * 默认返回OEM类型     */    public static final String DF_OEM_PREFIX = Z2M1_PREFIX;    /**     * OEM类型     */    public static final String OEM_PREFIX = Z2M1_PREFIX;    /**     * OEM热点前缀     */    public static final String OEM_WIFISPOT_PREFIX = "VPaiHot_";    /**     * 快捷过滤(内部调用)     *     * @param ssid     wifi ssid     * @param fName    需要过滤判断的名字     * @param isQMarks 是否过滤引号     * @return     */    private static boolean quickFilter(String ssid, String fName, boolean isQMarks) {        // ssid.contains(fName) // 包含        // ssid.startsWith(fName) // 以fName 开头        boolean isSWith = ssid.startsWith(fName);        if (isQMarks) {            return isSWith;        } else {            if (isSWith || ssid.startsWith("\"" + fName)) {                return true;            }        }        return false;    }    /**     * 设备前缀过滤 (判断是否支持的设备)     *     * @param ssid     需要匹配的ssid     * @param isQMarks 是否过滤引号     * @return true = 支持的设备，false = 不支持的设备     */    public static boolean cameraFilter(String ssid, boolean isQMarks) {        try {            // 防止ssid 等于null            if (ssid != null) {                // 判断是否OEM                if (IS_OEM) {                    // 判断是否OEM                    boolean isOEM = quickFilter(ssid.toLowerCase(), OEM_PREFIX.toLowerCase(), isQMarks);                    // 返回结果                    return isOEM;                }                // ------ 不是OEM,则表示属于 VeePai 原生app 全部都支持  ------                // 转换小写SSID                String lSSID = ssid.toLowerCase();                // 判断是否Z2、M1设备                boolean isZ2M1 = quickFilter(lSSID, Z2M1_PREFIX.toLowerCase(), isQMarks);                // 如果是则直接返回                if (isZ2M1) {                    return true;                }                // 判断是否Z1设备                boolean isZ1 = quickFilter(lSSID, Z1_PREFIX.toLowerCase(), isQMarks);                // 如果是则直接返回                if (isZ1) {                    return true;                }                // 判断是否Z2 Ipai设备                boolean isZ2IPai = quickFilter(lSSID, OEM_Z2_IPAI_PREFIX.toLowerCase(), isQMarks);                // 如果是则直接返回                if (isZ2IPai) {                    return true;                }                // 判断是否Z2 Viowo设备                boolean isZ2Viowo = quickFilter(lSSID, OEM_Z2_VIOWO_PREFIX.toLowerCase(), isQMarks);                // 如果是则直接返回                if (isZ2Viowo) {                    return true;                }                // 判断是否Z2 EnShow设备                boolean isZ2EnShow = quickFilter(lSSID, OEM_Z2_ENSHOW_PREFIX.toLowerCase(), isQMarks);                // 如果是则直接返回                if (isZ2EnShow) {                    return true;                }            }        } catch (Exception e) {        }        return false;    }    /**     * 获取SSID前缀     *     * @param ssid     完整的ssid     * @param isQMarks 是否过滤引号     * @return     */    public static String getSSIDPrefix(String ssid, boolean isQMarks) {        try {            // 判断是否OEM            if (IS_OEM) {                // 返回结果                return DF_OEM_PREFIX;            }            // ------ 不是OEM,则表示属于 VeePai 原生app 全部都支持  ------            // 转换小写SSID            String lSSID = ssid.toLowerCase();            // 判断是否M1设备            boolean isZ2M1 = quickFilter(lSSID, Z2M1_PREFIX.toLowerCase(), isQMarks);            // 如果是则直接返回            if (isZ2M1) {                return Z2M1_PREFIX;            }            // 判断是否Z1设备            boolean isZ1 = quickFilter(lSSID, Z1_PREFIX.toLowerCase(), isQMarks);            // 如果是则直接返回            if (isZ1) {                return Z1_PREFIX;            }            // 判断是否Z2设备            boolean isZ2IPai = quickFilter(lSSID, OEM_Z2_IPAI_PREFIX.toLowerCase(), isQMarks);            // 如果是则直接返回            if (isZ2IPai) {                return OEM_Z2_IPAI_PREFIX;            }            // 判断是否Z2设备            boolean isZ2Viowo = quickFilter(lSSID, OEM_Z2_VIOWO_PREFIX.toLowerCase(), isQMarks);            // 如果是则直接返回            if (isZ2Viowo) {                return OEM_Z2_VIOWO_PREFIX;            }            // 判断是否Z2 EnShow设备            boolean isZ2EnShow = quickFilter(lSSID, OEM_Z2_ENSHOW_PREFIX.toLowerCase(), isQMarks);            // 如果是则直接返回            if (isZ2EnShow) {                return OEM_Z2_ENSHOW_PREFIX;            }        } catch (Exception e) {        }        // 返回默认OEM前缀        return DF_OEM_PREFIX;    }    /**     * 快速检测OEM(判断是否符合条件)     *     * @param vsIndexOf 拆分前缀     * @param ssid      搜索返回ssid     * @return     */    public static boolean quickCheckOEM(int vsIndexOf, String ssid) {        if (IS_OEM) { // 属于OEM            // 前缀必须属于第一位，并且属于符合的前缀            if (vsIndexOf == 0 && WifiUtils.cameraFilter(ssid.trim(), false)) {                return true; // 符合条件的OEM            }            return false;        }        return true;    }    // =======================  热点功能  =========================    /**     * Wifi热点正在关闭 -- WifiManager.WIFI_AP_STATE_DISABLING     */    public static final int WIFI_AP_STATE_DISABLING = 10;    /**     * Wifi热点已关闭 -- WifiManager.WIFI_AP_STATE_DISABLED     */    public static final int WIFI_AP_STATE_DISABLED = 11;    /**     * Wifi热点正在打开 -- WifiManager.WIFI_AP_STATE_ENABLING     */    public static final int WIFI_AP_STATE_ENABLING = 12;    /**     * Wifi热点已打开 -- WifiManager.WIFI_AP_STATE_ENABLED     */    public static final int WIFI_AP_STATE_ENABLED = 13;    /**     * Wifi热点状态未知 -- WifiManager.WIFI_AP_STATE_FAILED     */    public static final int WIFI_AP_STATE_FAILED = 14;    /**     * 获取Wifi热点状态     *     * @return     */    public int getWifiApState() {        try {            // 反射获取方法            Method method = mWifiManager.getClass().getMethod("getWifiApState");            // 调用方法,获取状态            int wifiApState = (Integer) method.invoke(mWifiManager);            // 打印状态            //LogUtils.INSTANCE.d(TAG, "WifiApState: " + wifiApState);            return wifiApState;        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG, e, "getWifiApState - Error");        }        return WIFI_AP_STATE_FAILED;    }    /**     * 获取Wifi热点配置信息     *     * @return     */    public WifiConfiguration getWifiApConfiguration() {        try {            // 获取Wifi热点方法            Method method = mWifiManager.getClass().getMethod("getWifiApConfiguration");            // 获取配置            WifiConfiguration wifiApConfig = (WifiConfiguration) method.invoke(mWifiManager);            // 返回配置信息            return wifiApConfig;        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG, e, "getWifiApConfiguration - Error");        }        return null;    }    /**     * 判断是否打开Wifi热点     *     * @return     */    public boolean isOpenWifiAp() {        // 判断是否开启热点(默认未打开)        boolean isOpen = false;        // 获取当前Wifi热点状态        int wifiApState = getWifiApState();        switch (wifiApState) {            case WIFI_AP_STATE_DISABLING: // Wifi热点正在关闭                break;            case WIFI_AP_STATE_DISABLED: // Wifi热点已关闭                break;            case WIFI_AP_STATE_ENABLING: // Wifi热点正在打开                break;            case WIFI_AP_STATE_ENABLED: // Wifi热点已打开                isOpen = true;                break;            case WIFI_AP_STATE_FAILED: // Wifi热点状态未知                break;        }        return isOpen;    }    /**     * 关闭Wifi热点(判断当前状态)     *     * @param isExecute 是否执行关闭     * @return 是否之前开启     */    public boolean closeWifiApCheck(boolean isExecute) {        // 判断是否开启热点(默认是)        boolean isOpen = true;        // 获取当前Wifi热点状态        int wifiApState = getWifiApState();        switch (wifiApState) {            case WIFI_AP_STATE_DISABLING: // Wifi热点正在关闭                isExecute = false;                break;            case WIFI_AP_STATE_DISABLED: // Wifi热点已关闭                isOpen = false;                break;            case WIFI_AP_STATE_ENABLING: // Wifi热点正在打开                break;            case WIFI_AP_STATE_ENABLED: // Wifi热点已打开                break;            case WIFI_AP_STATE_FAILED: // Wifi热点状态未知                break;        }        // 如果属于开启，则进行关闭        if (isOpen && isExecute) {            closeWifiAp();        }        return isOpen;    }    /**     * 关闭Wifi热点     */    public void closeWifiAp() {        try {            // 获取设置Wifi热点方法            Method method = mWifiManager.getClass().getMethod("setWifiApEnabled", WifiConfiguration.class, boolean.class);            // 创建一个新的网络配置            WifiConfiguration netConfig = new WifiConfiguration();            netConfig.allowedAuthAlgorithms.clear();            netConfig.allowedGroupCiphers.clear();            netConfig.allowedKeyManagement.clear();            netConfig.allowedPairwiseCiphers.clear();            netConfig.allowedProtocols.clear();            // 设置Wifi SSID            netConfig.SSID = "CloseWifiAp"; // formatSSID(ssid,true);            // 设置Wifi属性            netConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);            netConfig.allowedProtocols.set(WifiConfiguration.Protocol.RSN);            netConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);            netConfig.allowedKeyManagement.set(KeyMgmt.WPA_PSK);            netConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);            netConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);            netConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);            netConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);            // 设置Wifi属性            netConfig.preSharedKey = "CloseWifiAp";            // 开启Wifi热点            method.invoke(mWifiManager, netConfig, false);        } catch (Exception e) {            //	LogUtils.INSTANCE.e(TAG, e, "closeWifiAp - Error");        }    }    /**     * 开启Wifi热点     *     * @param ssid Wifi名     * @param pwd  Wifi密码     */    public void stratWifiAp(String ssid, String pwd) {        try {            // 获取设置Wifi热点方法            Method method = mWifiManager.getClass().getMethod("setWifiApEnabled", WifiConfiguration.class, boolean.class);            // 创建一个新的网络配置            WifiConfiguration netConfig = new WifiConfiguration();            netConfig.allowedAuthAlgorithms.clear();            netConfig.allowedGroupCiphers.clear();            netConfig.allowedKeyManagement.clear();            netConfig.allowedPairwiseCiphers.clear();            netConfig.allowedProtocols.clear();            // 设置Wifi SSID            netConfig.SSID = ssid; // formatSSID(ssid,true);            // 设置Wifi密码            netConfig.preSharedKey = pwd; // "\"" + pwd + "\"";            // 设置Wifi属性//			netConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);//			netConfig.allowedProtocols.set(WifiConfiguration.Protocol.RSN);//			netConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);//			netConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);//			netConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);//			netConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);//			netConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);//			netConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);            // =======            netConfig.hiddenSSID = false;            netConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);            // newConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);            netConfig.allowedKeyManagement.set(KeyMgmt.WPA_PSK);            netConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);            netConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);            netConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);            netConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);            netConfig.status = WifiConfiguration.Status.ENABLED;            // =======            // 开启Wifi热点            method.invoke(mWifiManager, netConfig, true);        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG, e, "stratWifiAp - Error");        }    }    /**     * 转换ip地址     *     * @param data 需要转换的数据     * @return     */    private String intToString(int data) {        StringBuffer sb = new StringBuffer();        int b = (data >> 0) & 0xff;        sb.append(b + ".");        b = (data >> 8) & 0xff;        sb.append(b + ".");        b = (data >> 16) & 0xff;        sb.append(b + ".");        b = (data >> 24) & 0xff;        sb.append(b);        return sb.toString();    }    /**     * 是否有连接热点     *     * @return     */    public boolean isConnectHot() {        try {            BufferedReader br = new BufferedReader(new FileReader("/proc/net/arp"));            String line;            while ((line = br.readLine()) != null) {                String[] splitted = line.split(" +");                if (splitted != null && splitted.length >= 4) {                    String ipAdr = splitted[0]; // Ip地址                    // 防止地址为null,并且需要以.拆分 存在4个长度  255.255.255.255                    if (ipAdr != null && ipAdr.split("\\.").length >= 3) {                        return true;                    }                }            }        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG, e, "isConnectHot - Error");        }        return false;    }    /**     * 获取热点主机ip地址     *     * @return     */    public String getHotspotServiceIp() {        try {            // 获取网关信息            DhcpInfo dhcpinfo = mWifiManager.getDhcpInfo();            // 获取服务器地址            return intToString(dhcpinfo.serverAddress);        } catch (Exception e) {            e.printStackTrace();            // --            //LogUtils.INSTANCE.e(TAG, e, "getHotspotServiceIp - Error");        }        return null;    }    /**     * 获取连接上的子网关热点IP(一个)     *     * @return     */    public String getHotspotAllotIp() {        try {            BufferedReader br = new BufferedReader(new FileReader("/proc/net/arp"));            String line;            while ((line = br.readLine()) != null) {                String[] splitted = line.split(" +");                if (splitted != null && splitted.length >= 4) {                    String ipAdr = splitted[0]; // Ip地址                    // 防止地址为null,并且需要以.拆分 存在4个长度  255.255.255.255                    if (ipAdr != null && ipAdr.split("\\.").length >= 3) {                        return ipAdr;                    }                }            }        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG, e, "getHotspotIp - Error");        }        return null;    }    /**     * 获取热点拼接后的ip网关掩码     *     * @param df    默认网关掩码     * @param ipAdr ip地址     * @return     */    public String getHotspotSplitIpMask(String df, String ipAdr) {        // 网关掩码        String hsMask = df;        // 获取网关掩码        if (ipAdr != null) {            try {                int length = ipAdr.lastIndexOf(".");                // 进行裁剪                hsMask = ipAdr.substring(0, length) + ".255";            } catch (Exception e) {                e.printStackTrace();                // --                //LogUtils.INSTANCE.e(TAG, e, "getHotspotSplitIpMask - Error");            }        }        return hsMask;    }    /**     * 获取生成的Wifi SSID     *     * @param mContext     * @return     *///    public static String getBuildWifiSSID(Context mContext) {//        try {//            String[] wifiMsgs = buildWifiMsg(mContext);//            if (TextUtils.isEmpty(wifiMsgs[0])) {//                return "";//            }//            return wifiMsgs[0];//        } catch (Exception e) {//        }//        return "";//    }    /**     * 生成热点Wifi信息     *     * @param mContext     * @return     *///    public static String[] buildWifiMsg(Context mContext) {//        // ------////		// 获取当前时间////		long cTime = System.currentTimeMillis();////		// 加密当前时间(小写)////		String tMd5 = EncryptionUtils.MD5(cTime + "");////		// 获取前面三位////		String f3Number = tMd5.substring(0,3);////		// 获取后三位////		String l3Number = tMd5.substring(tMd5.length() - 3, tMd5.length());////		// 生成唯一SSID - Wifi ssid 最多32位 (固定前缀 8 位 + 前三位 + 随即获取中间位数(13) + 后三位)////		wifiSpotSSID = WifiUtils.VPAI_WIFISPOT_PREFIX + f3Number + RandomUtils.getRandom(tMd5, 13) + l3Number;////		// 生成密码(MD5随即，12位)////		wifiSpotPwd = RandomUtils.getRandom(tMd5, 12);//        // ------//        //  在设备首次启动时，系统会随机生成一个64位的数字，并把这个数字以16进制字符串的形式保存下来，这个16进制的字符串就是ANDROID_ID，当设备被wipe后该值会被重置。//        String androidId = null;//        // 获取Serial Number//        String serialNumber = "" + Build.SERIAL;//        // 获取设备IMEI//        String deviceId = null;//        // 获取设备ICCID (不和SIM卡进行关联)//        // String simSerialNumber = null;//        // 获取设备IMSI (不和SIM卡进行关联)//        // String subscriberId = null;//        try {//            androidId = Settings.Secure.getString(mContext.getContentResolver(), Settings.Secure.ANDROID_ID);//        } catch (Exception e) {//            e.printStackTrace();//            androidId = "null";//        }//        try {//            // 获取手机信息//            TelephonyManager tpManager = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);//            deviceId = tpManager.getDeviceId() + "";//        } catch (Exception e) {//            e.printStackTrace();//            deviceId = "null";//        }//        //try {//        //	simSerialNumber = tpManager.getSimSerialNumber() + "";//        //} catch (Exception e) {//        //	e.printStackTrace();//        //	simSerialNumber = "null";//        //}//        //try {//        //	subscriberId = tpManager.getSubscriberId() + "";//        //} catch (Exception e) {//        //	e.printStackTrace();//        //	subscriberId = "null";//        //}//        // 生成唯一关联uuid  subscriberId.hashCode() | simSerialNumber.hashCode() |//        UUID deviceUuid = new UUID(androidId.hashCode(), ((long) deviceId.hashCode() << 32) | serialNumber.hashCode());//        // 获取id//        String uniqueId = deviceUuid.toString();//        // 进行MD5加密（主要是变短）= 32位//        String uuidMD5 = EncryptionUtils.MD5(uniqueId);//        // uuidMD5 长度//        int uMD5Length = uuidMD5.length();//        // 设置SSID(8 + 18)位//        String wifiSpotSSID = WifiUtils.OEM_WIFISPOT_PREFIX + uuidMD5.substring(0, 18).toUpperCase();//        // 设置密码(12)位//        String wifiSpotPwd = uuidMD5.substring(uMD5Length - 13, uMD5Length);//        // --//        return new String[]{wifiSpotSSID, wifiSpotPwd};//    }    /**     * 获取连接的热点信息(暂时不用)     *     * @return     */    private void getConnectedHotMsg() {        try {            BufferedReader br = new BufferedReader(new FileReader("/proc/net/arp"));            String line;            while ((line = br.readLine()) != null) {                String[] splitted = line.split(" +");                if (splitted != null && splitted.length >= 4) {                    String ip = splitted[0]; // Ip地址                    String mac = splitted[3]; // Mac 地址                }            }        } catch (Exception e) {            //LogUtils.INSTANCE.e(TAG, e, "getConnectedHotMsg - Error");        }    }    // ==========================  设置静态ip，域名，等信息  =====================================    /**     * 获取两个数之间的随机数(不含最大随机数,需要 + 1)     * @param min 最小随机数     * @param max 最大随机数     */    public static int getRandom(int min, int max) {        if (min > max) {            return 0;        } else if (min == max) {            return min;        }        return min + new Random().nextInt(max - min);    }    /**     * 创建一个静态ip Wifi配置信息     *     * @param ssid  wifi SSID     * @param pwd   wifi密码     * @param wType 加密类型     */    public WifiConfiguration staticWifiConfig(String SSID, String pwd, int wType) {        //return null;        // ip 设置在 192.168.168.100~200之间，可以固定 192.168.168.189，也可以随即生成189        String ip = "192.168.168." + getRandom(100, 201);        //LogUtils.INSTANCE.d(TAG, "随即生成的静态IP：" + ip);        return setStaticWifiConfig(createWifiConfig(SSID, pwd, wType), ip);    }    /**     * 设置静态Wifi信息     *     * @param wifiConfig Wifi配置信息     * @param ip         静态ip     * @return     */    private WifiConfiguration setStaticWifiConfig(WifiConfiguration wifiConfig, String ip) {        String gateway = null;        String dns = null;        if (ip != null) {            try {                InetAddress intetAddress = InetAddress.getByName(ip);                int intIp = inetAddressToInt(intetAddress);                dns = (intIp & 0xFF) + "." + ((intIp >> 8) & 0xFF) + "." + ((intIp >> 16) & 0xFF) + ".1";                gateway = dns;            } catch (Exception e) {                return null;            }        }        // 暂时不需要设置dns，所以dns参数传入null        return setStaticWifiConfig(wifiConfig, ip, gateway, null, 24);    }    /**     * 设置静态Wifi信息     *     * @param wifiConfig          Wifi配置信息     * @param ip                  静态ip     * @param gateway             网关     * @param dns                 dns     * @param networkPrefixLength 网络前缀长度     * @return     */    private WifiConfiguration setStaticWifiConfig(WifiConfiguration wifiConfig, String ip, String gateway, String dns, int networkPrefixLength) {        try {            if (ip == null || gateway == null) {                return null;            }            // 设置Inet地址            InetAddress intetAddress = InetAddress.getByName(ip);            if (Build.VERSION.SDK_INT <= 20) { // 旧的版本，5.0之前                // 设置IP分配方式，静态ip                setEnumField(wifiConfig, "STATIC", "ipAssignment");                // 设置不用代理                setEnumField(wifiConfig, "NONE", "proxySettings");                // 设置ip地址                setIpAddress(intetAddress, networkPrefixLength, wifiConfig);                // 设置网关                setGateway(InetAddress.getByName(gateway), wifiConfig);                if (dns != null) { // 判断是否需要设置域名                    // 设置DNS                    setDNS(InetAddress.getByName(dns), wifiConfig);                }            } else { // 5.0新版本改变到其他地方                Object obj = getDeclaredField(wifiConfig, "mIpConfiguration");                // 设置IP分配方式，静态ip                setEnumField(obj, "STATIC", "ipAssignment");                // 设置不用代理                setEnumField(obj, "NONE", "proxySettings");                // 设置ip地址、网关、DNS                setStaticIpConfig(ip, gateway, dns, networkPrefixLength, obj);            }            return wifiConfig;        } catch (Exception e) {            e.printStackTrace();            // --            //LogUtils.INSTANCE.e(TAG, e, "setStaticWifiMsg - Error");        }        return null;    }    public static int inetAddressToInt(InetAddress inetAddr) throws Exception {        byte[] addr = inetAddr.getAddress();        if (addr.length != 4) {            throw new IllegalArgumentException("Not an IPv4 address");        }        return ((addr[3] & 0xff) << 24) | ((addr[2] & 0xff) << 16) | ((addr[1] & 0xff) << 8) | (addr[0] & 0xff);    }    /**     * 设置DNS     *     * @param dns     * @param wifiConfig     * @throws Exception     */    public void setDNS(InetAddress dns, WifiConfiguration wifiConfig) throws Exception {        Object linkProperties = getField(wifiConfig, "linkProperties");        if (linkProperties == null)            throw new NullPointerException();        ArrayList<InetAddress> mDnses = (ArrayList<InetAddress>) getDeclaredField(linkProperties, "mDnses");        mDnses.clear(); // or add a new dns address , here I just want to replace DNS1        mDnses.add(dns);    }    /**     * 设置网关     *     * @param gateway     * @param wifiConfig     * @throws Exception     */    public void setGateway(InetAddress gateway, WifiConfiguration wifiConfig) throws Exception {        Object linkProperties = getField(wifiConfig, "linkProperties");        if (linkProperties == null)            throw new NullPointerException();        Class routeInfoClass = Class.forName("android.net.RouteInfo");        Constructor routeInfoConstructor = routeInfoClass.getConstructor(new Class[]{InetAddress.class});        Object routeInfo = routeInfoConstructor.newInstance(gateway);        ArrayList mRoutes = (ArrayList) getDeclaredField(linkProperties, "mRoutes");        mRoutes.clear();        mRoutes.add(routeInfo);    }    /**     * 设置Ip地址     *     * @param addr         ip地址     * @param prefixLength 网络前缀长度     * @param wifiConfig   Wifi配置信息     * @throws Exception     */    public void setIpAddress(InetAddress addr, int prefixLength, WifiConfiguration wifiConfig) throws Exception {        Object linkProperties = getField(wifiConfig, "linkProperties");        if (linkProperties == null)            throw new NullPointerException();        Class laClass = Class.forName("android.net.LinkAddress");        Constructor laConstructor = laClass.getConstructor(new Class[]{InetAddress.class, int.class});        Object linkAddress = laConstructor.newInstance(addr, prefixLength);        ArrayList mLinkAddresses = (ArrayList) getDeclaredField(linkProperties, "mLinkAddresses");        mLinkAddresses.clear();        mLinkAddresses.add(linkAddress);    }    /**     * 设置Ip地址、网关、DNS(5.0之后)     *     * @param ip           静态ip     * @param gateway      网关     * @param dns          dns     * @param prefixLength 网络前缀长度     * @param wifiConfig   Wifi配置信息     * @throws Exception     */    public void setStaticIpConfig(String ip, String gateway, String dns, int prefixLength, Object obj) throws Exception {        // 从WifiConfig -> mIpConfiguration 获取staticIpConfiguration        // 获取 staticIpConfiguration 变量        Object staticIpConfigClass = getField(obj, "staticIpConfiguration");        if (staticIpConfigClass == null) {            // 创建静态ip配置类            staticIpConfigClass = Class.forName("android.net.StaticIpConfiguration").newInstance();        }        // 初始化LinkAddress 并设置ip地址        Class laClass = Class.forName("android.net.LinkAddress");        Constructor laConstructor = laClass.getConstructor(new Class[]{InetAddress.class, int.class});        Object linkAddress = laConstructor.newInstance(InetAddress.getByName(ip), prefixLength);        // 设置地址ip地址 ipAddress        setValueField(staticIpConfigClass, linkAddress, "ipAddress");        // 设置网关 gateway        setValueField(staticIpConfigClass, InetAddress.getByName(gateway), "gateway");        if (dns != null) { // 判断是否需要设置域名            // 设置DNS            ArrayList<InetAddress> mDnses = (ArrayList<InetAddress>) getDeclaredField(staticIpConfigClass, "dnsServers");            mDnses.clear(); // or add a new dns address , here I just want to replace DNS1            mDnses.add(InetAddress.getByName(dns));        }        // 设置赋值 staticIpConfiguration 属性        setValueField(obj, staticIpConfigClass, "staticIpConfiguration");    }    /**     * 通过反射获取public字段     *     * @param obj     * @param name     * @return     * @throws Exception     */    private Object getField(Object obj, String name) throws Exception {        Field f = obj.getClass().getField(name);        Object out = f.get(obj);        return out;    }    /**     * 通过反射获取全部字段     *     * @param obj     * @param name     * @return     * @throws Exception     */    private Object getDeclaredField(Object obj, String name) throws Exception {        Field f = obj.getClass().getDeclaredField(name);        f.setAccessible(true);        Object out = f.get(obj);        return out;    }    /**     * 通过反射枚举类，进行设置     *     * @param obj   设置对象     * @param value 设置参数值     * @param name  变量名     * @throws Exception 抛出异常     */    private void setEnumField(Object obj, String value, String name) throws Exception {        Field f = obj.getClass().getField(name);        f.set(obj, Enum.valueOf((Class<Enum>) f.getType(), value));    }    /**     * 通过反射，进行设置     *     * @param obj   设置对象     * @param value 设置参数值     * @param name  变量名     * @throws Exception 抛出异常     */    private void setValueField(Object obj, Object val, String name) throws Exception {        Field f = obj.getClass().getField(name);        f.set(obj, val);    }    //=========================================================================================//    public static String getCurrentSSID(Context mContext) {//        WifiAdmin wifiadmin = new WifiAdmin(mContext);//        String conssid = "";////        if (PublicDefine.isWiFiConnect(mContext)) {//            conssid = wifiadmin.getWifiInfo().getSSID();//            if (null != conssid && conssid.contains("\"")) {//                conssid = conssid.substring(1, conssid.length() - 1);//            }//        } else {//            PublicDefine.toggleWiFi(mContext, true);//        }////        return conssid;//    }    /**     * 判断wifi是否连接     *     * @param context     * @return     */    public static boolean isWifiConnected(Context context) {        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo wifiNetworkInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);        if (wifiNetworkInfo.isConnected()) {            return true;        }        return false;    }    public static String getCurrentSSIDName(Context mContext) {        try{            if (mContext != null) {                WifiManager wifiMgr = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);                //int wifiState = wifiMgr.getWifiState();                WifiInfo info = wifiMgr.getConnectionInfo();                return info != null ? info.getSSID() : "";            }        }catch (Exception e){            return "";        }        return "";    }    /***     *判断当前wifi是否5G     * @param mContext     * @param wifiSSID     * @return     */    public static boolean is5GWifi(Context mContext, String ssid) {        WifiManager wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);        List<ScanResult> scanResults = wifiManager.getScanResults();        for (ScanResult scanResult : scanResults) {            if (scanResult.SSID.equals(ssid)) {                //返回4个数字，2开头的话就是2.4G,5开头的话就是5G                int frequency = scanResult.frequency;                if ((frequency + "").startsWith("2")) {  //2.4G的话就显示当前连接的SSID                    return false;                } else if ((frequency + "").startsWith("5")) {                    return true;                }                break;            }        }        return false;    }    public static void changeNetwork(final Context mContext) {        new Thread(new Runnable() {            @Override            public void run() {                try {                    if (Build.VERSION.SDK_INT >= 21) {                        //if (is4GAvailable(mContext)) {                        //LogTools.debug("camera_config", "changeNetwork goto set NET");                        final ConnectivityManager connectivityManager = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);                        NetworkRequest.Builder builder = new NetworkRequest.Builder();                        builder.addTransportType(NetworkCapabilities.TRANSPORT_WIFI);                        //builder.addCapability(NET_CAPABILITY_INTERNET);                        //强制使用蜂窝数据网络-移动数据                        //builder.addTransportType(TRANSPORT_CELLULAR);                        NetworkRequest request = builder.build();                        ConnectivityManager.NetworkCallback callback = new ConnectivityManager.NetworkCallback() {                            @Override                            public void onAvailable(Network network) {                                //start net update                                super.onAvailable(network);                                //end                                //LogTools.debug("camera_config", "changeNetwork network=" + network);                                if (Build.VERSION.SDK_INT >= 23) {                                    connectivityManager.bindProcessToNetwork(network);                                } else {                                    connectivityManager.setProcessDefaultNetwork(network);                                }                            }                        };                        connectivityManager.requestNetwork(request, callback);                    }                    //}                } catch (Exception e) {                    e.printStackTrace();                }            }        }).start();    }    public static boolean netAp(Context mContext) {        try {            if (WifiUtils.getCurrentSSIDName(mContext).replace("\"", "").startsWith("IPC") ||                    WifiUtils.getCurrentSSIDName(mContext).replace("\"", "").startsWith("@IPC") ||                    WifiUtils.getCurrentSSIDName(mContext).replace("\"", "").startsWith("MC") ||                    WifiUtils.getCurrentSSIDName(mContext).replace("\"", "").startsWith("@MC") ||                    WifiUtils.getCurrentSSIDName(mContext).replace("\"", "").startsWith("DoorBell") ||                    WifiUtils.getCurrentSSIDName(mContext).replace("\"", "").startsWith("@DoorBell")) {                return true;            } else {                return false;            }        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    public static boolean netApAgain(String ssid) {        try {            if (ssid.startsWith("IPC") ||                    ssid.startsWith("@IPC") ||                    ssid.startsWith("MC") ||                    ssid.startsWith("@MC") ||                    ssid.startsWith("DoorBell") ||                    ssid.startsWith("@DoorBell")) {                return true;            } else {                return false;            }        } catch (Exception e) {            e.printStackTrace();            return false;        }    }}